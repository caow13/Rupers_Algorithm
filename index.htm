<html>
<head>
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
<script src="https://code.jquery.com/jquery-1.11.1.min.js"></script>
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>
<style>
.img_sample {
  width: 300px;
  height: 300px;
}
.div_img_container {
  padding: 20px;
}
.div_tab_container {
  padding: 20px;
}
.content_container {
  margin-bottom: 70px;
}
.div_youku {
  width: 600px;
  height: 450px;
}
</style>
</head>
<body>
<div class="container">

<h1><center>Ruppert's Algorithm<small>&nbsp;&nbsp;&nbsp;&nbsp;曹玮，金逸飞，沈彤</small></center></h1>

<div class="content_container">
<h3>算法简介</h3>
<hr>
Delauney三角化实现了质量很高的点集三角化。
<br>
但是，特定的输入会造成三角化的结果包含很多形状较细的三角形，如左图。
<br>
在这种情况下，一般采用加点的方法，使得三角化结果较为均匀，如右图。
<br>
这样的结果一般用于有限元分析、mesh生成等领域。
<br>
<div class="div_img_container">
  <img src="double_hex_delauney.png" class="img_sample">
  <img src="double_hex_refined.png" class="img_sample">
</div>
<div class="alert alert-success">
  Ruppert的算法是这方面的奠基性工作。
  <br>
  它通过最少的加点，达到所有三角形的最小角度不小于设定的阈值的目的。
</div>
</div>

<div class="content_container">
<h3>视频展示</h3>
<hr>
<h4>程序基本流程：</h4>
<ul>
  <li>点击“Load from file”按钮，选择一个poly文件</li>
  <li>点击“Step1”按钮，进行初始Delauney三角化</li>
  <li>点击“Step2”按钮，通过加入线段中点，消除一些过细的三角形。可以点击“Step2 Single”按钮观看单步动画</li>
  <li>点击“Step3”按钮，去除多余三角形</li>
  <li>点击“Step4”按钮，通过加入三角形外心或线段中点，消除一些过细的三角形。可以点击“Step4 Single”按钮观看单步动画</li>
  <li>算法结束</li>
</ul>
<div id="player1" class="div_youku"></div>
<h4>自定义模型：</h4>
<ul>
  <li>点击“Create new model”按钮</li>
  <li>绘制一系列点，组成模型的外边界</li>
  <li>绘制一系列点，组成模型内部的孔洞边界</li>
  <li>将“Mode”设置为“Point”</li>
  <li>在每一个孔洞之内点一个点</li>
  <li>点击“Save to file”按钮，进行保存</li>
</ul>
<div id="player2" class="div_youku"></div>
<script type="text/javascript" src="http://player.youku.com/jsapi">
player1 = new YKU.Player('player1',{
  client_id: '3877249b12228a92',
  vid: 'XNzI1OTI3ODg0'
});
player2 = new YKU.Player('player2',{
  client_id: '3877249b12228a92',
  vid: 'XNzI1OTI4Nzg4'
});
</script>
</div>

<div class="content_container">
<h3>算法介绍</h3>
<hr>
<h4>算法输入</h4>
<ol>
  <li>外边界，以边集合的形式给出。必须是多边形</li>
  <li>内部孔洞的边界，以边集合的形式给出。可以是多边形，也可以只有一条线段</li>
</ol>
<div class="alert alert-danger">注意Ruppert算法有一个限制：外边界不能有小于60度的尖角出现，否则算法可能会一直加点，无法正常结束。</div>
<h4>算法流程</h4> 
<ol>
  <li>以输入图的顶点为输入，计算Delaunay 三角剖分。将剖分结果保存成 T
  <li>统计所有 Encroach 的边，即所有没有用到的输入边和直径圆中包含其他顶点的边。
  <li>给Encroach的边加中点，使得新的三角剖分用到了所有的输入边。
  <li>删除所有边界外的三角形
  <li>迭代处理所有skinny 三角形（即，最小角小于阈值的三角形）。给这些三角形加外心。如果外心没有引起Encroach，则加入；若引起Encroach， 跳转到第二步处理Encroach。
  <li> 迭代结束，输出Ruppert算法的剖分结果
<ol>
<h4>算法输出</h4>
加点后的三角化，满足所有三角形的最小角度不小于设定的阈值
</div>

<div class="content_container">
<h3>运行说明</h3>
<hr>
<ul class="nav nav-tabs">
  <li class="active"><a href="#windows" data-toggle="tab">Windows</a></li>
  <li><a href="#linux" data-toggle="tab">Linux</a></li>
</ul>
<div class="tab-content">
  <div class="tab-pane active div_tab_container" id="windows">
    <ul>
      <li>下载<a href="https://github.com/caow13/Rupers_Algorithm/blob/master/Ruppert_EXE.rar?raw=true">打包好的可执行文件</a></li>
      <li>安装压缩包中的vcredist_x86.exe文件</li>
      <li>运行Demo.exe</li>
    </ul>
  </div>
  <div class="tab-pane div_tab_container" id="linux">
    这里仅对Ubuntu 14.04提供支持，其他发行版类似
    <ul>
      <li>安装matplotlib, opengl和numpy：<code>sudo apt-get install python-matplotlib python-numpy python-opengl</code></li>
      <li>安装python扩展工具：<code>sudo apt-get install python-setuptools</code></li>
      <li>安装python扩展triangle：<code>sudo easy_install install triangle</code></li>
      <li>编译安装PyQt5：下载sip和PyQt5，解压后运行<code>python configure.py && make && sudo make install</code></li>
      <li>执行Demo.py：<code>python Demo.py</code></li>
    </ul>
  </div>
</div>
</div>

<div class="content_container">
<h3>相关链接</h3>
<hr>
<ul>
  <li><a href="http://www.cis.upenn.edu/~cis610/ruppert.pdf">论文链接</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Ruppert's_algorithm">Ruppert's Algorithm Wiki页面</a></li>
</ul>
</div>

</div>
</body>
</html>
